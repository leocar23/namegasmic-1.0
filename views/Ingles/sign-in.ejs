<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Sign In - NameGasm</title>
  <meta name="description" content="Access your NameGasm account to manage your domains and web services securely." />
  <link rel="preconnect" href="https://cdnjs.cloudflare.com" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <style>
    :root{
      --bg1:#0d1b3a;
      --bg2:#1b2a59;
      --brand:#0073e6;
      --accent:#ffcc00;
      --text:#ffffff;
      --card:rgba(0,0,0,0.7);
      --error:#ff4d4f;
      --ok:#2ecc71;
    }
    *{ box-sizing:border-box; }
    html,body{ height:100%; }
    body{
      margin:0;
      font-family: Arial, sans-serif;
      background: linear-gradient(to bottom, var(--bg1), var(--bg2));
      color: var(--text);
      display:flex;
      align-items:center;
      justify-content:center;
      min-height:100vh;
    }

    /* Language selector */
    .lang{
      position:fixed; top:25px; right:35px; z-index:9999;
      display:flex; gap:10px;
    }
    .lang img{ width:60px; height:50px; cursor:pointer; display:block; }

    /* Card */
    .login-container{
      width:100%;
      max-width:420px;
      background:var(--card);
      padding:36px 28px;
      border-radius:12px;
      box-shadow:0 8px 20px rgba(0,0,0,0.5);
    }
    .login-container h1{
      margin:0 0 18px;
      text-align:center;
      font-size:1.9rem;
      color:var(--accent);
    }
    .subtitle{
      text-align:center;
      margin-top:-6px;
      margin-bottom:18px;
      opacity:.9;
      font-size:.95rem;
    }

    label{
      display:block;
      font-size:.9rem;
      margin:10px 0 6px;
    }
    .field{
      position:relative;
    }
    input[type="email"],
    input[type="password"]{
      width:100%;
      padding:12px 44px 12px 14px; /* room for icons/toggle */
      border:none;
      border-radius:8px;
      font-size:1rem;
    }
    .input-icon{
      position:absolute; right:12px; top:50%; transform:translateY(-50%);
      pointer-events:none; opacity:.7;
    }
    .toggle-pass{
      position:absolute; right:36px; top:50%; transform:translateY(-50%);
      background:transparent; border:none; cursor:pointer; color:#333;
      font-size:1rem; padding:4px; opacity:.8;
    }

    .remember-forgot{
      display:flex; align-items:center; justify-content:space-between;
      gap:8px; margin-top:10px;
      font-size:.9rem;
    }
    .remember-forgot a{
      color:var(--accent); text-decoration:none;
    }
    .remember-forgot a:hover{ text-decoration:underline; }

    .btn{
      width:100%;
      padding:12px;
      margin-top:16px;
      border:none;
      border-radius:50px;
      background:var(--accent);
      color:var(--brand);
      font-weight:bold;
      font-size:1rem;
      cursor:pointer;
      transition: transform .2s, box-shadow .2s, opacity .2s;
    }
    .btn:hover{ transform:translateY(-2px); box-shadow:0 6px 12px rgba(0,0,0,0.3); }
    .btn[disabled]{ opacity:.6; cursor:not-allowed; transform:none; box-shadow:none; }

    .links{
      text-align:center; margin-top:14px; font-size:.95rem;
    }
    .links a{ color:var(--accent); text-decoration:none; }
    .links a:hover{ text-decoration:underline; }

    .alert{
      margin-top:10px;
      padding:10px 12px;
      border-radius:8px;
      background:rgba(255,77,79,.12);
      color:#ffd7d7;
      border:1px solid rgba(255,77,79,.4);
      display:none;
      font-size:.9rem;
    }
    .alert.ok{
      background:rgba(46,204,113,.12);
      border-color:rgba(46,204,113,.4);
      color:#e3ffe3;
    }

    /* Chat button */
    #chatbot-container{ position:fixed; bottom:20px; right:20px; z-index:9999; }
    #chatbot-toggle{
      background:var(--brand); color:#fff; border:none;
      padding:12px 18px; border-radius:50px; cursor:pointer;
      box-shadow:0 4px 8px rgba(0,0,0,0.2);
    }
    #chatbot-box{
      display:none; width:300px; height:400px; background:#fff; color:#0d1b3a;
      border-radius:12px; box-shadow:0 4px 10px rgba(0,0,0,0.3);
      position:absolute; bottom:60px; right:0; overflow:hidden;
    }
    .chat-header{ background:var(--brand); color:#fff; padding:10px; font-weight:bold; }
    #chatbot-messages{ height:300px; overflow-y:auto; padding:10px; font-size:14px; }
    .chat-input-row{ display:flex; border-top:1px solid #ccc; }
    .chat-input-row input{ flex:1; border:none; padding:10px; font-size:14px; }
    .chat-input-row button{ background:var(--brand); color:#fff; border:none; padding:10px; cursor:pointer; }
  </style>
</head>
<body>

  <!-- Selector de idioma (versiÃ³n estÃ¡tica con .html) -->
  <div class="lang" aria-label="Language selector">
    <a href="esp-sign-in.html" title="VersiÃ³n en EspaÃ±ol">
      <img src="/img/bandera-es.png" alt="EspaÃ±ol">
    </a>
  </div>

  <main class="login-container" role="main" aria-labelledby="title">
    <h1 id="title">Sign In</h1>
    <p class="subtitle">Welcome back. Please sign in to continue.</p>

    <!-- Mensajes -->
    <div id="form-alert" class="alert" role="alert" aria-live="polite"></div>

    <form id="signin-form" novalidate>
      <label for="email">Email</label>
      <div class="field">
        <input
          id="email"
          name="email"
          type="email"
          inputmode="email"
          placeholder="you@example.com"
          required
          autocomplete="email"
          aria-describedby="emailHelp"
        />
        <i class="fa-solid fa-envelope input-icon" aria-hidden="true"></i>
      </div>
      <small id="emailHelp" style="opacity:.85;">Use the email you used to register.</small>

      <label for="password">Password</label>
      <div class="field">
        <input
          id="password"
          name="password"
          type="password"
          placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
          required
          minlength="6"
          autocomplete="current-password"
        />
        <button class="toggle-pass" type="button" aria-label="Show or hide password">
          <i class="fa-regular fa-eye"></i>
        </button>
        <i class="fa-solid fa-lock input-icon" aria-hidden="true"></i>
      </div>

      <div class="remember-forgot">
        <label style="display:flex; align-items:center; gap:8px;">
          <input type="checkbox" id="remember" name="remember" />
          Remember me
        </label>
        <!-- Para sitio estÃ¡tico: usa .html -->
        <a href="forgot-password.html">Forgot password?</a>
      </div>

      <button id="submit-btn" class="btn" type="submit">
        <i class="fa-solid fa-right-to-bracket"></i> Sign In
      </button>
    </form>

    <div class="links">
      Donâ€™t have an account?
      <!-- Para sitio estÃ¡tico: usa .html -->
      <a href="sign-up.html">Create new account</a>
    </div>
  </main>

  <!-- Chatbot Universal -->
  <div id="chatbot-container">
    <button id="chatbot-toggle">ðŸ’¬ Chat</button>
    <div id="chatbot-box" role="dialog" aria-modal="false" aria-labelledby="chatTitle">
      <div class="chat-header" id="chatTitle">Assistant</div>
      <div id="chatbot-messages"></div>
      <div class="chat-input-row">
        <input type="text" id="chatbot-input" placeholder="Write here..." />
        <button id="chatbot-send" aria-label="Send message">âž¤</button>
      </div>
    </div>
  </div>

  <script>
    // ===== Utilidades =====
    const $ = (sel) => document.querySelector(sel);
    const alertBox = $('#form-alert');
    const form = $('#signin-form');
    const emailEl = $('#email');
    const passEl = $('#password');
    const submitBtn = $('#submit-btn');
    const toggleBtn = document.querySelector('.toggle-pass');

    // Mostrar / Ocultar contraseÃ±a
    toggleBtn.addEventListener('click', () => {
      const isPwd = passEl.type === 'password';
      passEl.type = isPwd ? 'text' : 'password';
      toggleBtn.innerHTML = isPwd
        ? '<i class="fa-regular fa-eye-slash"></i>'
        : '<i class="fa-regular fa-eye"></i>';
    });

    // ValidaciÃ³n rÃ¡pida
    function showAlert(msg, ok=false){
      alertBox.textContent = msg;
      alertBox.classList.toggle('ok', ok);
      alertBox.style.display = 'block';
    }
    function clearAlert(){
      alertBox.style.display = 'none';
      alertBox.classList.remove('ok');
      alertBox.textContent = '';
    }
    function emailLooksOk(email){
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    // EnvÃ­o del formulario (demo + hook para backend)
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      clearAlert();

      const email = emailEl.value.trim();
      const password = passEl.value;

      // Validaciones mÃ­nimas
      if (!email || !emailLooksOk(email)){
        showAlert('Please enter a valid email address.');
        emailEl.focus(); return;
      }
      if (!password || password.length < 6){
        showAlert('Your password must be at least 6 characters.');
        passEl.focus(); return;
      }

      // UI: bloquea botÃ³n
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Signing inâ€¦';

      try{
        // ===== OPCIÃ“N A: Demo (sin backend) =====
        // Simula Ã©xito y redirige a dashboard estÃ¡tico:
        await new Promise(r => setTimeout(r, 600));
        // Guarda "remember me" sencillo (no sensible) para demo
        if (document.getElementById('remember').checked) {
          localStorage.setItem('ng_remember', email);
        } else {
          localStorage.removeItem('ng_remember');
        }
        showAlert('Login successful. Redirectingâ€¦', true);
        window.location.href = 'dashboard.html'; // cambiar si tu dashboard tiene otro nombre
        return;

        // ===== OPCIÃ“N B: Conectar a tu backend (descomenta y ajusta) =====
        /*
        const res = await fetch('/api/auth/signin', {
          method:'POST',
          headers:{ 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password, remember: document.getElementById('remember').checked })
        });
        if(!res.ok){
          const err = await res.json().catch(()=>({message:'Invalid credentials'}));
          throw new Error(err.message || 'Invalid credentials');
        }
        // Espera un token/sesiÃ³n y redirige:
        window.location.href = '/dashboard';
        */

        // ===== OPCIÃ“N C: Firebase Email/Password (ejemplo) =====
        /*
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

        const firebaseConfig = { apiKey:"...", authDomain:"...", projectId:"...", appId:"..." };
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);

        const userCred = await signInWithEmailAndPassword(auth, email, password);
        // userCred.user contiene el usuario autenticado
        window.location.href = 'dashboard.html';
        */
      } catch(err){
        console.error(err);
        showAlert(err.message || 'Sign in failed. Please try again.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fa-solid fa-right-to-bracket"></i> Sign In';
      }
    });

    // Autocompletar email si "remember me" quedÃ³ guardado (demo)
    (function restoreRemembered(){
      const v = localStorage.getItem('ng_remember');
      if (v) {
        emailEl.value = v;
        document.getElementById('remember').checked = true;
      }
    })();

    // ===== Chatbot mÃ­nimo =====
    const toggle = document.getElementById("chatbot-toggle");
    const box = document.getElementById("chatbot-box");
    const input = document.getElementById("chatbot-input");
    const send = document.getElementById("chatbot-send");
    const messages = document.getElementById("chatbot-messages");

    toggle.addEventListener("click", () => {
      box.style.display = box.style.display === "none" ? "block" : "none";
    });

    function addMsg(who, text){
      const wrap = document.createElement('div');
      wrap.style.marginBottom = '10px';
      wrap.innerHTML = `<strong>${who}:</strong> ${text}`;
      messages.appendChild(wrap);
      messages.scrollTop = messages.scrollHeight;
    }

    send.addEventListener("click", () => {
      const text = input.value.trim();
      if(!text) return;
      addMsg('You', text);
      addMsg('Bot', 'Thank you, your answer is on its way.');
      input.value = "";
    });
    input.addEventListener('keydown', (e) => {
      if(e.key === 'Enter'){ e.preventDefault(); send.click(); }
    });
  </script>
</body>
</html>

